taxiDriver:Actor
taxiUI:ClientSide Application
user:Actor
clientUI:ClientSide Application
httpHandler:Web Server
webpageCreator:Web Server
notificationModule:Web Server
dbconnector:Web Server
accounts:DBMS
requestsAndReservations:DBMS

user:clientUI.request a taxi 
clientUI:confirmed=httpHandler.requestTaxi
httpHandler:confirmation page=webpageCreator.requestTaxi
webpageCreator:request_ID=dbconnector.addRequest
dbconnector:auth valid=accounts.SELECT ... (check auth)
dbconnector:placed=requestsAndReservations.INSERT ...
webpageCreator:>notificationModule.HandleRequest
clientUI:user.confirmation_page

notificationModule:taxi=dbconnector.getFirstInQueue
dbconnector:active taxi=accounts.SELECT...
notificationModule:notified=taxiUI.notifyIcomingRequest
taxiUI:taxiDriver.notify
notificationModule:listen_for_answer
[c:alt a taxi accepts in time]
	taxiDriver:taxiUI.accept
	taxiUI:confirmed=httpHandler.accept
	httpHandler:confirmed=webpageCreator.accept
	webpageCreator:marked=dbconnector.activateRequest
	dbconnector:done=requestsAndReservations.UPDATE...
	user:clientUI.cancelRequest
	clientUI:denied=httpHandler.cancelRequest
	httpHandler:denied=webpageCreator.cancelRequest

	dbconnector:>notificationModule.request_answered_trigger&

	taxiUI:taxiDriver.drive_page
	taxiUI:stop
	webpageCreator:abortion failed=dbconnector.deleteRequest
	dbconnector:denied=requestsAndReservations.DELETE...
	clientUI:user.denied
	clientUI:stop

	notificationModule:>clientUI.taxi_is_coming
	clientUI:user.taxi_is_coming
	clientUI:stop

	--[no taxi accepts in time]
	user:clientUI.cancelRequest
	clientUI:cancelled=httpHandler.cancelRequest
	httpHandler:cancelled=webpageCreator.cancelRequest
	webpageCreator:transaction aborted=dbconnector.deleteRequest
	dbconnector:confirmed=requestsAndReservations.DELETE...
	dbconnector:>notificationModule.abort&
	clientUI:user.homepage
	clientUI:stop
	notificationModule:aborted=taxiUI.abort
	taxiUI:taxiDriver.client aborted
	taxiUI:stop
[/c]
