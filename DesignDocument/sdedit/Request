taxiDriver:Actor
taxiUI:ClientSide Application
user:Actor
clientUI:ClientSide Application
httpHandler:Web Server
webpageCreator:Web Server
notificationModule:Web Server
dbconnector:Web Server
accounts:DBMS
requestsAndReservations:DBMS

user:clientUI.request a taxi 
clientUI:confirmed=httpHandler.requestTaxi
httpHandler:confirmation page=webpageCreator.requestTaxi
webpageCreator:request_created=dbconnector.addRequest
dbconnector:auth valid=accounts.SELECT ... (check auth)
dbconnector:placed=requestsAndReservations.INSERT ...
webpageCreator:>notificationModule.notifyIncomingRequest
clientUI:user.confirmation_page
[c:loop until a taxi driver accepts]
	notificationModule:taxi=dbconnector.getFirstInQueue
	dbconnector:active taxi=accounts.SELECT ...
	notificationModule:notified=taxiUI.notifyCall
	taxiUI:taxiDriver.notify
	notificationModule:listenForAnswer
	[c:alt possible responses]
		--[refusal]
		taxiDriver:taxiUI.refuse
		taxiUI:ok=httpHandler.refused
		httpHandler:confirm refusal=webpageCreator.refuse
		webpageCreator:marked=dbconnector.updateAccount(inactive)
		dbconnector:accounts.UPDATE...
		taxiUI:taxiDriver.homepage&
		taxiUI:stop
		--[timeout]
		taxiDriver:taxiUI.no_interaction
		taxiUI:handled=httpHandler.timeout
		httpHandler:timeout handled=webpageCreator.handleTimeout
		webpageCreator:moved=dbconnector.updateAccount(activationTime=Now)
		dbconnector:accounts.UPDATE ...
		taxiUI:stop
		--[acceptance]
		taxiDriver:taxiUI.accept
		taxiUI:confirmed=httpHandler.accept
	[/c]
[/c]
httpHandler:confirmed=webpageCreator.accept
webpageCreator:marked=dbconnector.activateRequest
dbconnector:done=requestsAndReservations.UPDATE ...
dbconnector:done=accounts.UPDATE ...
dbconnector:>notificationModule.request_answered_trigger&
notificationModule:notified=clientUI.taxi_is_coming
clientUI:user.taxi_is_coming
clientUI:stop
taxiUI:taxiDriver.drive_page
taxiUI:stop

