Code inspection checklist 
Naming Conventions 
1. All class names, interface names, method names, class variables, method variables, and constants used should have meaningful names and do what the name suggests. 
2! If  one-‐character  variables  are  used,  they  are  used  only  for  temporary “throwaway” variables, such as those used in for loops. 
3. Class  names  are  nouns,  in  mixed  case,  with  the  first  letter  of  each  word  in capitalized. Examples:  class Raster;  class ImageSprite;  
4. Interface names should be capitalized like classes. 
5. Method names should be verbs, with the first letter of each addition word capitalized. Examples:  getBackground();  computeTemperature(). 
6. Class  variables,  also  called  attributes,  are  mixed  case,  but  might  begin with  an  underscore  (‘_’)  followed  by  a  lowercase  first  letter.    All  the remaining  words  in  the  variable  name  have  their  first  letter  capitalized.  Examples:   _windowHeight,  timeSeriesData. 
7. Constants  are  declared  using  all  uppercase  with  words  separated  by  an underscore.  Examples:   MIN_WIDTH;  MAX_HEIGHT; 

Indention 
8! Three or four spaces are used for indentation and done so consistently 
9! No tabs are used to indent 

Braces 
10. Consistent bracing style is used, either the preferred “Allman” style (first brace  goes  underneath  the  opening  block)  or  the  “Kernighan  and  Ritchie” style  (first  brace  is  on  the  same  line  of  the  instruction  that  opens  the  new block). 
11. All  if,  while,  do-­‐while,  try-­‐catch,  and  for  statements  that  have  only  one statement to execute are surrounded by curly braces.  Example: 
Avoid this: 
            if ( condition ) 
                doThis(); 
Instead do this: 
            if ( condition )  
            { 
               doThis(); 
            } 

File Organization 
12. Blank  lines  and  optional  comments  are  used  to  separate  sections (beginning  comments,  package/import  statements,  class/interface declarations  which  include  class  variable/attributes  declarations, constructors, and methods). 
13. Where practical, line length does not exceed 80 characters. 
14. When  line  length  must  exceed  80  characters,  it  does  NOT  exceed  120 characters.  

Wrapping Lines 
15. Line break occurs after a comma or an operator. 
16. Higher-­‐level breaks are used. 
17. A  new  statement  is  aligned  with  the  beginning  of  the  expression  at  the same level as the previous line. 

Comments 
18. Comments  are  used  to  adequately  explain  what  the  class,  interface, methods, and blocks of code are doing. 
19. Commented  out  code  contains  a  reason  for  being  commented  out  and  a date it can be removed from the source file if determined it is no longer needed. 

Java Source Files 
20. Each Java source file contains a single public class or interface. 
21. The public class is the first class or interface in the file. 
22. Check that the external program interfaces are implemented consistently with what is described in the javadoc.  
23. Check that the javadoc is complete (i.e., it covers all classes and files part of the set of classes assigned to you). 

Package and Import Statements 
24. If  any  package  statements  are  needed,  they  should  be  the  first  non-comment statements.  Import statements follow. 

Class and Interface Declarations 
25. The class or interface declarations shall be in the following order: 
	A. class/interface documentation comment 
	B. class or interface statement 
	C. class/interface implementation comment, if necessary 
	D. class (static) variables 
		a. first public class variables 
		b. next protected class variables 
		c. next package level (no access modifier) 
		d. last private class variables 
	E. instance variables 
		e. first public instance variables 
		f. next protected instance variables 
		g. next package level (no access modifier) 
		h. last private instance variables 
	F. constructors 
	G. methods  
26. Methods  are  grouped  by  functionality  rather  than  by  scope  or accessibility. 
27. Check  that  the  code  is  free  of  duplicates,  long  methods,  big  classes, breaking encapsulation, as well as if coupling and cohesion are adequate. 

Initialization and Declarations 
28. Check that variables and class members are of the correct type. Check that they have the right visibility (public/private/protected)   
29. Check that variables are declared in the proper scope  
30. Check that constructors are called when a new object is desired 
31. Check that all object references are initialized before use  
32. Variables are initialized where they are declared, unless dependent upon a computation 
33. Declarations  appear  at  the  beginning  of  blocks  (A  block  is  any  code surrounded by curly braces “{“ and “}” ).  The exception is a variable can be declared in a ‘for’ loop. 
